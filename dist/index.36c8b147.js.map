{"mappings":"ACAA,MAAM,EAAS,SAAS,cAAc,CAAC,UACjC,EAAM,EAAO,UAAU,CAAC,KAE9B,CAAA,EAAO,KAAK,CAAG,OAAO,UAAU,CAChC,EAAO,MAAM,CAAG,OAAO,WAAW,AAElC,OAAM,EASJ,YAAY,CAAS,CAAE,CAAS,CAAE,CAAc,CAAE,CAChD,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,CAAC,CAAG,EACT,IAAI,CAAC,MAAM,CAAG,EACd,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,OAAO,CAAG,GACf,IAAI,CAAC,QAAQ,CAAG,GAChB,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,WAAW,EAC/B,CAEA,aAAsB,CACpB,IAAM,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAU,CACtE,OAAO,CAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAO,MAAM,EAAE,AAC1D,CAEA,KAAK,CAA6B,CAAE,CAClC,EAAI,SAAS,GACb,EAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAE,EAAG,AAAU,EAAV,KAAK,EAAE,EAC/C,EAAI,SAAS,CAAG,IAAI,CAAC,KAAK,CAC1B,EAAI,IAAI,GACR,EAAI,SAAS,EACf,CAEA,QAAS,CACP,IAAI,CAAC,EAAE,EAAI,IAAI,CAAC,OAAO,CACvB,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,EAAE,CAEb,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,MAAM,CAAG,EAAO,MAAM,GACtC,IAAI,CAAC,CAAC,CAAG,EAAO,MAAM,CAAG,IAAI,CAAC,MAAM,CACpC,IAAI,CAAC,EAAE,EAAI,CAAC,IAAI,CAAC,QAAQ,EAG3B,IAAI,CAAC,IAAI,CAAC,EACZ,CACF,CA+BA,IA7BA,MAGE,aAAc,CAFd,IAAA,CAAA,OAAA,CAAoB,EAAE,CAGpB,EAAO,gBAAgB,CAAC,QAAS,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,GAC3D,IAAI,CAAC,OAAO,EACd,CAEA,YAAY,CAAiB,CAAE,CAC7B,IAAM,EAAS,AAAgB,GAAhB,KAAK,MAAM,GAAU,GAG9B,EAAS,IAAI,EAFT,EAAM,OAAO,CACb,EAAM,OAAO,CACS,GAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EACpB,CAEA,SAAU,CACR,GAAI,EAAK,CAGP,IAAK,IAAM,KAFX,EAAI,SAAS,CAAC,EAAG,EAAG,EAAO,KAAK,CAAE,EAAO,MAAM,EAE1B,IAAI,CAAC,OAAO,EAC/B,EAAO,MAAM,GAGf,sBAAsB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAC9C,CACF,CACF","sources":["<anon>","src/index.ts"],"sourcesContent":["const canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nclass Circle {\n    constructor(x, y, radius){\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.dy = 0;\n        this.gravity = 0.6;\n        this.friction = 0.7;\n        this.color = this.randomColor();\n    }\n    randomColor() {\n        const colors = [\n            \"#FF5733\",\n            \"#33FF57\",\n            \"#3357FF\",\n            \"#F3FF33\",\n            \"#FF33A1\"\n        ];\n        return colors[Math.floor(Math.random() * colors.length)];\n    }\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n        ctx.fillStyle = this.color;\n        ctx.fill();\n        ctx.closePath();\n    }\n    update() {\n        this.dy += this.gravity;\n        this.y += this.dy;\n        if (this.y + this.radius > canvas.height) {\n            this.y = canvas.height - this.radius;\n            this.dy *= -this.friction;\n        }\n        this.draw(ctx);\n    }\n}\nclass App {\n    constructor(){\n        this.circles = [];\n        canvas.addEventListener(\"click\", this.spawnCircle.bind(this));\n        this.animate();\n    }\n    spawnCircle(event) {\n        const radius = Math.random() * 20 + 10;\n        const x = event.clientX;\n        const y = event.clientY;\n        const circle = new Circle(x, y, radius);\n        this.circles.push(circle);\n    }\n    animate() {\n        if (ctx) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            for (const circle of this.circles)circle.update();\n            requestAnimationFrame(this.animate.bind(this));\n        }\n    }\n}\nnew App();\n\n//# sourceMappingURL=index.36c8b147.js.map\n","const canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nclass Circle {\n  x: number;\n  y: number;\n  radius: number;\n  dy: number;\n  gravity: number;\n  friction: number;\n  color: string;\n\n  constructor(x: number, y: number, radius: number) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.dy = 0;\n    this.gravity = 0.6;\n    this.friction = 0.7;\n    this.color = this.randomColor();\n  }\n\n  randomColor(): string {\n    const colors = ['#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33A1'];\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  update() {\n    this.dy += this.gravity;\n    this.y += this.dy;\n\n    if (this.y + this.radius > canvas.height) {\n      this.y = canvas.height - this.radius;\n      this.dy *= -this.friction;\n    }\n\n    this.draw(ctx);\n  }\n}\n\nclass App {\n  circles: Circle[] = [];\n\n  constructor() {\n    canvas.addEventListener('click', this.spawnCircle.bind(this));\n    this.animate();\n  }\n\n  spawnCircle(event: MouseEvent) {\n    const radius = Math.random() * 20 + 10;\n    const x = event.clientX;\n    const y = event.clientY;\n    const circle = new Circle(x, y, radius);\n    this.circles.push(circle);\n  }\n\n  animate() {\n    if (ctx) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      for (const circle of this.circles) {\n        circle.update();\n      }\n\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  }\n}\n\nnew App();\n"],"names":["canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","Circle","constructor","x","y","radius","dy","gravity","friction","color","randomColor","colors","Math","floor","random","length","draw","beginPath","arc","PI","fillStyle","fill","closePath","update","circles","addEventListener","spawnCircle","bind","animate","event","circle","clientX","clientY","push","clearRect","requestAnimationFrame"],"version":3,"file":"index.36c8b147.js.map"}