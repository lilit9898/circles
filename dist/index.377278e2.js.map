{"mappings":"AAAA,MAAM,SAAS,SAAS,cAAc,CAAC;AACvC,MAAM,MAAM,OAAO,UAAU,CAAC;AAE9B,OAAO,KAAK,GAAG,OAAO,UAAU;AAChC,OAAO,MAAM,GAAG,OAAO,WAAW;AAElC,MAAM;IASJ,YAAY,CAAS,EAAE,CAAS,EAAE,MAAc,CAAE;QAChD,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW;IAC/B;IAEA,cAAsB;QACpB,MAAM,SAAS;YAAC;YAAW;YAAW;YAAW;YAAW;SAAU;QACtE,OAAO,MAAM,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO,MAAM,EAAE;IAC1D;IAEA,KAAK,GAA6B,EAAE;QAClC,IAAI,SAAS;QACb,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG;QAClD,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK;QAC1B,IAAI,IAAI;QACR,IAAI,SAAS;IACf;IAEA,SAAS;QACP,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO;QACvB,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;QAEjB,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;QAElB,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,MAAM,EAAE;YACxC,IAAI,CAAC,CAAC,GAAG,OAAO,MAAM,GAAG,IAAI,CAAC,MAAM;YACpC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;QAC3B;QAEA,IAAI,CAAC,IAAI,CAAC;IACZ;AACF;AAEA,MAAM;IAGJ,aAAc;aAFd,UAAoB,EAAE;aAetB,UAAU;YACR,IAAI,KAAK;gBACP,IAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;gBAE/C,QAAQ,GAAG,CAAC;oBACV,SAAS,IAAI,CAAC,OAAO;gBACvB;gBACA,KAAK,MAAM,UAAU,IAAI,CAAC,OAAO,CAC/B,OAAO,MAAM;gBAGf,sBAAsB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;YAC9C;QACF;QAzBE,OAAO,gBAAgB,CAAC,SAAS,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI;QAC3D,IAAI,CAAC,OAAO;IACd;IAEA,YAAY,KAAiB,EAAE;QAC7B,MAAM,SAAS,KAAK,MAAM,KAAK,KAAK;QACpC,MAAM,IAAI,MAAM,OAAO;QACvB,MAAM,IAAI,MAAM,OAAO;QACvB,MAAM,SAAS,IAAI,OAAO,GAAG,GAAG;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IACpB;AAgBF;AAEA,IAAI","sources":["src/index.ts"],"sourcesContent":["const canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nclass Circle {\n  x: number;\n  y: number;\n  radius: number;\n  dy: number;\n  gravity: number;\n  friction: number;\n  color: string;\n\n  constructor(x: number, y: number, radius: number) {\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.dy = 0;\n    this.gravity = 0.98;\n    this.friction = 0.7;\n    this.color = this.randomColor();\n  }\n\n  randomColor(): string {\n    const colors = ['#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33A1'];\n    return colors[Math.floor(Math.random() * colors.length)];\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  update() {\n    this.dy += this.gravity;\n    this.y += this.dy;\n\n    console.log(this.y);\n\n    if (this.y + this.radius > canvas.height) {\n      this.y = canvas.height - this.radius;\n      this.dy *= -this.friction;\n    }\n\n    this.draw(ctx);\n  }\n}\n\nclass App {\n  circles: Circle[] = [];\n\n  constructor() {\n    canvas.addEventListener('click', this.spawnCircle.bind(this));\n    this.animate();\n  }\n\n  spawnCircle(event: MouseEvent) {\n    const radius = Math.random() * 20 + 10;\n    const x = event.clientX;\n    const y = event.clientY;\n    const circle = new Circle(x, y, radius);\n    this.circles.push(circle);\n  }\n\n  animate = () => {\n    if (ctx) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      console.log({\n        circles: this.circles,\n      });\n      for (const circle of this.circles) {\n        circle.update();\n      }\n\n      requestAnimationFrame(this.animate.bind(this));\n    }\n  };\n}\n\nnew App();\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}